AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creating OperatingSystem PatchBaseline for all AWS instances.
Resources:
  MyPatchBaseline:
    Type: 'AWS::SSM::PatchBaseline'
    Properties:
      Name: MyWindowsBaseline001
      Description: Baseline containing all updates approved for Windows instances
      OperatingSystem: WINDOWS
      ApprovalRules:
        PatchRules:
          - PatchFilterGroup:
              PatchFilters:
                - Values:
                    - Critical
                    - Important
                  Key: MSRC_SEVERITY
                - Values:
                    - SecurityUpdates
                    - CriticalUpdates
                  Key: CLASSIFICATION
                - Values:
                    - WindowsServer2019
                    - WindowsServer2016
                    - WindowsServer2012
                    - WindowsServer2012R2
                  Key: PRODUCT
            ApproveAfterDays: 0
            ComplianceLevel: CRITICAL
  
  SetBaseline:
    Type: Custom::SetBaseline
    Properties:
      ServiceToken: !GetAtt SetBaselineFunction.Arn
      Region: !Ref "AWS::Region"
      baselineId: !Ref MyPatchBaseline

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: setbaseline
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:*
            Resource: *


  SetBaselineFunction:
    Type: AWS::Lambda::Function
    Properties:
      RunTime: python3.7
      Description: Give an SSM Patch baseline, set it to the default
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          # Given a Patch Baseline, set it to default
          # Then, signal back CloudFormation a success signal

          import json
          import boto3
          import logging
          import os
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def set_baseline(mybaseline):

              ssm = boto3.client('ssm')

              logger.info(f'About to set baseline {mybaseline} as the default...')

              response = ssm.register_default_patch_baseline(
                  BaselineId=mybaseline
              )

              logger.info(f'SSM response is {response}')

          def signal_success():
              logger.info('Sending success response back to CloudFormation')
              responseData = {}
              responseData['Comment'] = 'example custom respone data where we could return custom attributes'
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

          def signal_failure():
              logger.info('Sending FAILURE response back to CloudFormation')
              responseData = {}
              responseData['Comment'] = 'example custom respone data where we could return custom attributes'
              cfnresponse.send(event, context, cfnresponse.FAILURE, responseData)

          def lambda_handler(event, context):
              logger.info('Beginning function...')
              logger.info(f'Got event: {event}')
              
              requestType = event['requestType']
              baselineId = event['ResourceProperties']['baselineId']
              logger.info(f'Request Type is: {requestType}')
              logger.info(f'Baseline ID is: {baselineId}')

              # Now set our baseline
              if requestType == "Create" or requestType == "Update":
                  logger.info(f'Got a {requestType} request, setting default baseline...')
                  try:
                      set_baseline(baselineId)
                      signal_success()
                  except:
                      logger.error(f'Unknown failure in setting default patch baseline!')
                      signal_failure()
              elif requestType == "Delete":
                  #  No good definition for "undoing" a default set
                  #  TODO One option here would be to add code to set default back to the AWS Default
                  logger.info('Got Delete request, doing nothing except signalling back success.')
                  signal_success()
              else:
                  logger.info(f'Request type is not recognized! Request Type was {requestType}')
                  

              return {
                  'statusCode': 200,
                  'body': json.dumps('Lambda function ending.')
              }

      
